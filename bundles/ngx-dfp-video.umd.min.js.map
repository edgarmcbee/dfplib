{"version":3,"sources":["ng://ngx-dfp/video/service/dfp-id-generator.service.ts","ng://ngx-dfp/video/directive/dfp-video.directive.ts","ng://ngx-dfp/video/dfp-video.module.ts"],"names":["DfpIDGeneratorService","this","generatedIDs","prototype","generateID","type","id","Math","random","toString","slice","dfpIDGenerator","element","tagName","toLowerCase","isTaken","isUnique","Injectable","DfpVideoDirective","platformId","elementRef","renderer","adEvents","EventEmitter","adsDone","ngOnInit","_this","isPlatformBrowser","el","nativeElement","contentPlayer","querySelector","setAttribute","width","height","adContainer","createElement","addClass","appendChild","loadImaSdk","then","setUpIMA","adActions","subscribe","act","play","pause","resume","initialUserAction","loadAds","adsManager","adDisplayContainer","google","ima","AdDisplayContainer","adsLoader","AdsLoader","addEventListener","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","event","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","onended","contentEnded","initialize","load","requestAds","adTagUrl","adsRequest","AdsRequest","linearAdSlotWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","contentCompleteCalled","contentComplete","adsManagerLoadedEvent","adsRenderingSettings","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","getAdsManager","startAdsManager","AdEvent","CONTENT_PAUSE_REQUESTED","onContentPauseRequested","CONTENT_RESUME_REQUESTED","onContentResumeRequested","ALL_ADS_COMPLETED","CLICK","COMPLETE","FIRST_QUARTILE","LOADED","MIDPOINT","PAUSED","STARTED","THIRD_QUARTILE","forEach","adEvent","onAdEvent","init","ViewMode","NORMAL","start","pauseForAd","resumeAfterAd","getAd","isLinear","emit","adErrorEvent","destroy","adTag","Directive","args","selector","Object","decorators","Inject","PLATFORM_ID","ElementRef","Renderer2","Input","Output","DfpVideoModule","NgModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DfpIDGeneratorService {\n\n  private generatedIDs = {};\n\n  generateID(type = 'dfp-ad') {\n    let id = null;\n\n    do {\n      const number = Math.random().toString().slice(2);\n      id = type + '-' + number;\n    } while (id in this.generatedIDs);\n\n    this.generatedIDs[id] = true;\n\n    return id;\n  }\n\n  dfpIDGenerator(element: HTMLElement) {\n    if (element && element.id && !(element.id in this.generatedIDs)) {\n      return element.id;\n    }\n\n    const id = this.generateID(element.tagName.toLowerCase());\n    if (element) { element.id = id; }\n\n    return id;\n  }\n\n  isTaken(id) {\n    return id in this.generatedIDs;\n  }\n\n  isUnique(id) {\n    return !this.isTaken(id);\n  }\n\n}\n","import { Directive, Inject, PLATFORM_ID, ElementRef, OnInit, Input, Output, EventEmitter, Renderer2 } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { loadImaSdk } from '@alugha/ima';\n\nimport { DfpIDGeneratorService } from '../service/dfp-id-generator.service';\n\n@Directive({\n  selector: 'dfp-video'\n})\nexport class DfpVideoDirective implements OnInit {\n\n  @Input() width: number;\n  @Input() height: number;\n\n  @Input() adTag: string;\n  @Input() adActions: EventEmitter<'play' | 'pause' | 'resume'>;\n\n  @Output() adEvents = new EventEmitter<any>();\n\n  contentPlayer: HTMLVideoElement;\n  adContainer: HTMLElement;\n\n  private contentCompleteCalled: boolean;\n  private adDisplayContainer: google.ima.AdDisplayContainer;\n  private adsLoader: google.ima.AdsLoader;\n  private adsManager: google.ima.AdsManager;\n  private adsDone = false;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private dfpIDGenerator: DfpIDGeneratorService\n  ) { }\n\n  ngOnInit() {\n    if (isPlatformBrowser(this.platformId)) {\n\n      const el = this.elementRef.nativeElement;\n\n      this.dfpIDGenerator.dfpIDGenerator(el);\n\n      this.contentPlayer = el.querySelector('video');\n      this.renderer.setAttribute(this.contentPlayer, 'width', this.width.toString());\n      this.renderer.setAttribute(this.contentPlayer, 'height', this.height.toString());\n\n      this.adContainer = el.querySelector('.ad-container');\n      if (!this.adContainer) {\n        this.adContainer = this.renderer.createElement('div');\n        this.renderer.addClass(this.adContainer, 'ad-container');\n        this.renderer.appendChild(el, this.adContainer);\n      }\n\n      // ima setup\n      loadImaSdk().then(() => this.setUpIMA());\n\n      // simple control\n      this.adActions.subscribe(act => {\n        switch (act) {\n          case 'play':\n            this.play();\n            break;\n          case 'pause':\n            this.pause();\n            break;\n          case 'resume':\n            this.resume();\n            break;\n        }\n      });\n    }\n  }\n\n  play() {\n    if (!this.adsDone) {\n      this.initialUserAction();\n      this.loadAds();\n      this.adsDone = true;\n    }\n  }\n\n  pause() {\n    if (this.adsManager) {\n      this.adsManager.pause();\n    }\n  }\n\n  resume() {\n    if (this.adsManager) {\n      this.adsManager.resume();\n    }\n  }\n\n  setUpIMA() {\n    // Create the ad display container.\n    this.adDisplayContainer = new google.ima.AdDisplayContainer(this.adContainer, this.contentPlayer);\n    // Create ads loader.\n    this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);\n    // Listen and respond to ads loaded and error events.\n    this.adsLoader.addEventListener(\n      google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,\n      event => this.onAdsManagerLoaded(event),\n      false);\n    this.adsLoader.addEventListener(\n      google.ima.AdErrorEvent.Type.AD_ERROR,\n      event => this.onAdError(event),\n      false);\n\n    // An event listener to tell the SDK that our content video\n    // is completed so the SDK can play any post-roll ads.\n    this.contentPlayer.onended = () => {\n      this.contentEnded();\n    };\n  }\n\n  initialUserAction() {\n    this.adDisplayContainer.initialize();\n    this.contentPlayer.load();\n  }\n\n  requestAds(adTagUrl) {\n    const adsRequest = new google.ima.AdsRequest();\n    adsRequest.adTagUrl = adTagUrl;\n    adsRequest.linearAdSlotWidth = this.width;\n    adsRequest.linearAdSlotHeight = this.height;\n    adsRequest.nonLinearAdSlotWidth = this.width;\n    adsRequest.nonLinearAdSlotHeight = this.height;\n    this.adsLoader.requestAds(adsRequest);\n  }\n\n  contentEnded() {\n    this.contentCompleteCalled = true;\n    this.adsLoader.contentComplete();\n  }\n\n  onAdsManagerLoaded(adsManagerLoadedEvent) {\n    const adsRenderingSettings = new google.ima.AdsRenderingSettings();\n    adsRenderingSettings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n    this.adsManager = adsManagerLoadedEvent.getAdsManager(\n      this.contentPlayer, adsRenderingSettings);\n    this.startAdsManager(this.adsManager);\n  }\n\n  startAdsManager(adsManager) {\n    // Attach the pause/resume events.\n    adsManager.addEventListener(\n      google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED,\n      () => this.onContentPauseRequested(),\n      false,\n      this);\n    adsManager.addEventListener(\n      google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED,\n      () => this.onContentResumeRequested(),\n      false,\n      this);\n    // Handle errors.\n    adsManager.addEventListener(\n      google.ima.AdErrorEvent.Type.AD_ERROR,\n      event => this.onAdError(event),\n      false,\n      this);\n    const events = [google.ima.AdEvent.Type.ALL_ADS_COMPLETED,\n    google.ima.AdEvent.Type.CLICK,\n    google.ima.AdEvent.Type.COMPLETE,\n    google.ima.AdEvent.Type.FIRST_QUARTILE,\n    google.ima.AdEvent.Type.LOADED,\n    google.ima.AdEvent.Type.MIDPOINT,\n    google.ima.AdEvent.Type.PAUSED,\n    google.ima.AdEvent.Type.STARTED,\n    google.ima.AdEvent.Type.THIRD_QUARTILE];\n    events.forEach(event =>\n      adsManager.addEventListener(event, adEvent => this.onAdEvent(adEvent), false)\n    );\n\n    adsManager.init(\n      this.width,\n      this.height,\n      google.ima.ViewMode.NORMAL);\n\n    adsManager.start();\n  }\n\n  onContentPauseRequested() {\n    this.pauseForAd();\n  }\n\n  onContentResumeRequested() {\n    // Without this check the video starts over from the beginning on a\n    // post-roll's CONTENT_RESUME_REQUESTED\n    if (!this.contentCompleteCalled) {\n      this.resumeAfterAd();\n    }\n  }\n\n  onAdEvent(adEvent) {\n    if (adEvent.type === google.ima.AdEvent.Type.LOADED) {\n      const ad = adEvent.getAd();\n      if (!ad.isLinear()) {\n        this.onContentResumeRequested();\n      }\n    }\n    this.adEvents.emit(adEvent);\n  }\n\n  onAdError(adErrorEvent) {\n    if (this.adsManager) {\n      this.adsManager.destroy();\n    }\n    this.resumeAfterAd();\n    this.adEvents.emit(adErrorEvent);\n  }\n\n  // application functions\n\n  resumeAfterAd() {\n    this.contentPlayer.play();\n  }\n\n  pauseForAd() {\n    this.contentPlayer.pause();\n  }\n\n  loadAds() {\n    this.requestAds(this.adTag);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { DfpIDGeneratorService } from './service/dfp-id-generator.service';\nimport { DfpVideoDirective } from './directive/dfp-video.directive';\n\n@NgModule({\n  declarations: [\n    DfpVideoDirective\n  ],\n  exports: [\n    DfpVideoDirective\n  ],\n  providers: [\n    DfpIDGeneratorService\n  ]\n})\nexport class DfpVideoModule {\n\n}\n"]}